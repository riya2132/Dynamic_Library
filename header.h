#include<stdio.h>
#include<stdlib.h>
#include<string.h>
void insertbll(int x);
void insertell(int x);
void insertnll(int x,int n);
void printll();
void deletell(int n);
void linkedlist();
struct node *createdl(int data);
void insertell(int x);
void insertedl(struct node *t);
void insertafterdl(struct node *t,int item);
void deletedl(int item);
void reversedl();
void printdl();
void doublyll();
struct node* createcl(int x);
void insertbcl(struct node *t);
void insertecl(struct node *t);
void insertncl(struct node* t,int item);
void deletecl(int item);
void printcl();
void cirll();
int isemptys();
int isfulls();
void push(int data);
int pop();
void displays();
void stack1();
int isfullq();
int isemptyq();
void enqueue(int d);
int dequeue();
int noelementsq();
void displayq();
void queue1();
void pushs(int a);
int  pops();
void displaysl();
void stackll();
int isfullcq();
int isemptycq();
void enqueuecq(int d);
int dequeuecq();
void displaycq();
void cirqueue();
int isfulldq();
int isemptydq();
void enqueuerear(int d);
int dequeuefront();
void enqueuefront(int d);
int dequeuerear();
void displaydq();
void dequeue1();
void check(int data);
void insertpq(int data);
void deletepq(int item);
int noelementspq();
void displaypq();
void prique();
void linear_search(int a[],int n,int d);
void bubblesort(int a[],int n);
void binarysearch(int a[],int l,int r,int d);
int minimum(int x,int y);
int fibonaccisearch(int *a,int n,int x);
void searcha();
void selection_sort(int a[],int n);
void bubble_sort(int a[],int n);
int part(int *a,int f,int e);
void quick_sort(int *a,int f,int e);
void div_conq(int arr[],int low,int up);
void mergea(int arr[],int temp[],int low1,int up1, int low2,int up2);
void out_arr(int arr[],int temp[],int low,int up);
void count_sort(int *a,int n,int k,int *b);
void sorta();
void pushe(struct node *ptr);
struct node* pope();
struct node *createex(int x);
int op(char a);
struct node *createtree(char *a);
void inordere(struct node *root);
void exptree();
struct node *createbst(int x);
struct node* insertbst(struct node *root,int x);
void inorder(struct node *root);
void preorder(struct node *root);
void postorder(struct node *root);
void traversebst(struct node *root);
struct node* deleten(struct node *root,int key);
struct node* case_a(struct node *root,struct node *prev,struct node *ptr);
struct node* case_b(struct node *root,struct node *prev,struct node *ptr);
struct node* case_c(struct node *root,struct node *prev,struct node *ptr);
int height(struct node *root);
void bst();
struct node *creatett(int data);
struct node* inserttt(struct node *root,int d);
struct node *succ(struct node *ptr);
struct node *pred(struct node *ptr);
void inordertt(struct node *root);
void preordertt(struct node *root);
void deletett(struct node *root,int dkey);
void casea(struct node* root,struct node* par,struct node* ptr);
void caseb(struct node* root,struct node* par,struct node* ptr);
void casec(struct node* root,struct node* par,struct node* ptr);
void threadedtree();
